//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ObjectExplorer
{
	using System;
	using System.Collections;
	using System.Diagnostics;
    
    
	/// <summary>
	/// Strongly typed collection of ObjectExplorer.Node.
	/// </summary>
	[Serializable()]
	public class NodeCollection : System.Collections.CollectionBase
	{
		private Hashtable NodeID_IX = new Hashtable();
		private Hashtable ChildrenIX = new Hashtable();
        
		private ItemAttributeCollection _AttributeReference;

		public ItemAttributeCollection AttributeRef
		{
			get { return _AttributeReference; }
			set { _AttributeReference = value; }
		}

		/// <summary>
		/// Default constructor.
		/// </summary>
		public NodeCollection() : 
			base()
		{
		}
        
		private void IndexThis(Node value)
		{
			if ( NodeID_IX == null )
				NodeID_IX = new Hashtable();

			if ( !NodeID_IX.Contains(value.NodeID) )
				NodeID_IX.Add(value.NodeID, value);

			if ( value.Level > 1 )
			{
				if ( ChildrenIX == null )
					ChildrenIX = new Hashtable();

				string ParentNodeID = value.NodeID.Substring(0,value.NodeID.LastIndexOf("_"));
				// Debug.WriteLine("Processing NodeID '" + value.NodeID + " [" + value.NodeName + "] ' Parent ID = '" + ParentNodeID + "' [" + this[ParentNodeID].NodeName + "]");

				if ( ChildrenIX.ContainsKey(ParentNodeID) )
				{
					//					if ( this[ParentNodeID] != null )
					//						Debug.WriteLine("\t\tAdding " + this[ParentNodeID].NodeName + " [" + ParentNodeID + "] " + " : " + value.NodeName + " [" + value.NodeID + "]");
					//					else
					//						Debug.WriteLine("\t\tAdding Unknown parent ID " + ParentNodeID);

					ArrayList ChildNodes = (ArrayList)ChildrenIX[ParentNodeID];
					ChildNodes.Add(value);
					ChildrenIX[ParentNodeID] = ChildNodes;
				}
				else
				{
					//					if ( this[ParentNodeID] != null )
					//						Debug.WriteLine("\tCreating new parent: " + this[ParentNodeID].NodeName + " [" + ParentNodeID + "] for " + value.NodeName + " [" + value.NodeID + "]");
					//					else
					//						Debug.WriteLine("\tCreating new parent: Unknown " + ParentNodeID);

					ArrayList ChildNodes = new ArrayList();
					ChildNodes.Add(value);
					ChildrenIX.Add(ParentNodeID, ChildNodes);

					//					Debug.WriteLine("\tParent: " + ParentNodeID + " contains " + ((ArrayList)ChildrenIX[ParentNodeID]).Count + " items");
				}
			}
		}


		public NodeCollection FilterByText(string SearchText)
		{
			NodeCollection Results = new NodeCollection();

			foreach ( Node n in this.List )
			{
				// Debug.WriteLine("Searching Node: " + n.NodeName);

				if ( n.ItemsInGroup != null )
				{
					// Debug.WriteLine("\tNode '" + n.NodeName + "' contains items");
					foreach ( EVEItem ei in n.ItemsInGroup )
					{
						// Debug.WriteLine("\t\tChecking item '" + ei.Name + "'");

						if ( ei.Name.ToLower().IndexOf(SearchText.ToLower()) != -1 )
						{
							if ( Results[n.NodeID] == null )
							{
								// Debug.WriteLine("\t\t\tCreating MATCH Parent Node: " + n.NodeName);

								Node newNode = new Node();
								newNode.NodeName = n.NodeName;
								newNode.NodeID = n.NodeID;
								newNode.NodeURL = n.NodeURL;
								newNode.LastUpdated = n.LastUpdated;
								newNode.IsItemGroup = n.IsItemGroup;

								Results.Add(newNode);
							}

							if ( Results[n.NodeID].ItemsInGroup == null )
								Results[n.NodeID].ItemsInGroup = new EVEItemCollection();

							Results[n.NodeID].ItemsInGroup.Add(ei);
						}
					}
				}
			}

			// return Results;
			return CreateHierarchy(Results);
		}

		private string GetParentNodeID(Node n)
		{
			return n.NodeID.Substring(0,n.NodeID.LastIndexOf("_"));
		}

		public string PathFromNode(Node n)
		{
			string[] Path = new string[n.Level];

			Node CurrentNode = n;

			int Level = 0;

			while ( CurrentNode.Level > 0 )
			{
				Path[Level++] = CurrentNode.NodeName;

				if ( CurrentNode.Level == 1 )
					break;
				
				CurrentNode = this[GetParentNodeID(CurrentNode)];
			}

			string retString = "";
			if ( Path.Length > 1 )
			{
				for ( int i = Path.Length; i > 0; i-- )
				{
					if ( retString.Length == 0)
						retString = Path[i-1];
					else
						retString+=" > " + Path[i-1];
				}
			}
			else
				retString = Path[0];

			return retString;
		}

		private NodeCollection CreateHierarchy(NodeCollection Nodes)
		{
			string ParentNodeID;

			foreach ( Node n in Nodes )
			{
				if ( n.Level > 1 )
				{
					int currentLevel = n.Level;
					Node currentNode = n;

					while ( currentNode.Level > 1 )
					{
						ParentNodeID = currentNode.NodeID.Substring(0,currentNode.NodeID.LastIndexOf("_"));

						// Does the parent node exist in this collection?
						// If not, get a copy of the node from the main collection
						if ( Nodes[ParentNodeID] == null )
						{
							// Get a reference to the real parent node from the master list
							Node ParentNode = this[ParentNodeID];

							// Debug.WriteLine("Creating parent node (" + ParentNode.NodeName + ") for " + n.NodeName);

							// Create a new node
							Node newNode = new Node();
							
							// Copy to attributes from the parent node to the new node
							newNode.NodeName	= ParentNode.NodeName;
							newNode.NodeID		= ParentNode.NodeID;
							newNode.NodeURL		= ParentNode.NodeURL;
							newNode.LastUpdated	= ParentNode.LastUpdated;
							newNode.IsItemGroup	= ParentNode.IsItemGroup;

							Nodes.Add(newNode);
							currentNode = newNode;
						}
						else
						{
							// Make the current node the parent and go through loop again
							currentNode = this[ParentNodeID];
						}
					}
				}
			}

			return Nodes;
		}
		
		/// <summary>
        /// Gets or sets the value of the ObjectExplorer.Node at a specific position in the NodeCollection.
        /// </summary>
        public ObjectExplorer.Node this[int index]
        {
            get
            {
                return ((ObjectExplorer.Node)(this.List[index]));
            }
            set
            {
                this.List[index] = value;
            }
        }

		public ObjectExplorer.Node this[string NodeID]
		{
			get
			{
				if ( NodeID_IX.Contains(NodeID) )
					return (Node)NodeID_IX[NodeID];
				else
					return null;
			}
		}

		public NodeCollection Children(Node value)
		{
			NodeCollection Nodes = new NodeCollection();

			// Debug.WriteLine("++++++++ GETTING CHILDREN FOR " + value.NodeName + " [" + value.NodeID + "]");

			if ( ChildrenIX != null )
			{
				if ( ChildrenIX.Contains(value.NodeID) )
				{
					ArrayList children = (ArrayList)ChildrenIX[value.NodeID];

					foreach ( object o in children )
					{
						Nodes.Add((Node)o);
					}

					// Debug.WriteLine("++++++++ CHILDREN FOR " + value.NodeName + " = " + Nodes.Count);

					return Nodes;
				}
			}

			return null;
		}

		public bool NodeHasChildren(Node value)
		{
			if ( ChildrenIX != null )
			{
				if ( ChildrenIX.Contains(value.NodeID) )
				{
					ArrayList children = (ArrayList)ChildrenIX[value.NodeID];
					if ( children.Count > 0 )
						return true;
					else
						return false;
				}
			}

			// Console.WriteLine("Unknown Node ID: {0}", value.NodeID);
			return false;

//			foreach ( Node n in this.List )
//			{
//				if ( n.NodeID.IndexOf(NodeID) != -1 && n.NodeID.Length > NodeID.Length )
//				{
//					return true;
//				}
//			}
//
//			return false;
		}
        
        /// <summary>
        /// Append a ObjectExplorer.Node entry to this collection.
        /// </summary>
        /// <param name="value">ObjectExplorer.Node instance.</param>
        /// <returns>The position into which the new element was inserted.</returns>
        public int Add(ObjectExplorer.Node value)
        {
			IndexThis(value);
            return this.List.Add(value);
        }
        
        /// <summary>
        /// Determines whether a specified ObjectExplorer.Node instance is in this collection.
        /// </summary>
        /// <param name="value">ObjectExplorer.Node instance to search for.</param>
        /// <returns>True if the ObjectExplorer.Node instance is in the collection; otherwise false.</returns>
        public bool Contains(ObjectExplorer.Node value)
        {
            return this.List.Contains(value);
        }
        
        /// <summary>
        /// Retrieve the index a specified ObjectExplorer.Node instance is in this collection.
        /// </summary>
        /// <param name="value">ObjectExplorer.Node instance to find.</param>
        /// <returns>The zero-based index of the specified ObjectExplorer.Node instance. If the object is not found, the return value is -1.</returns>
        public int IndexOf(ObjectExplorer.Node value)
        {
            return this.List.IndexOf(value);
        }
        
        /// <summary>
        /// Removes a specified ObjectExplorer.Node instance from this collection.
        /// </summary>
        /// <param name="value">The ObjectExplorer.Node instance to remove.</param>
        public void Remove(ObjectExplorer.Node value)
        {
            this.List.Remove(value);
        }
        
        /// <summary>
        /// Returns an enumerator that can iterate through the ObjectExplorer.Node instance.
        /// </summary>
        /// <returns>An ObjectExplorer.Node's enumerator.</returns>
        public new NodeCollectionEnumerator GetEnumerator()
        {
            return new NodeCollectionEnumerator(this);
        }
        
        /// <summary>
        /// Insert a ObjectExplorer.Node instance into this collection at a specified index.
        /// </summary>
        /// <param name="index">Zero-based index.</param>
        /// <param name="value">The ObjectExplorer.Node instance to insert.</param>
        public void Insert(int index, ObjectExplorer.Node value)
        {
            this.List.Insert(index, value);
        }
        
        /// <summary>
        /// Strongly typed enumerator of ObjectExplorer.Node.
        /// </summary>
        public class NodeCollectionEnumerator : object, System.Collections.IEnumerator
        {
            
            /// <summary>
            /// Current index
            /// </summary>
            private int _index;
            
            /// <summary>
            /// Current element pointed to.
            /// </summary>
            private ObjectExplorer.Node _currentElement;
            
            /// <summary>
            /// Collection to enumerate.
            /// </summary>
            private NodeCollection _collection;
            
            /// <summary>
            /// Default constructor for enumerator.
            /// </summary>
            /// <param name="collection">Instance of the collection to enumerate.</param>
            internal NodeCollectionEnumerator(NodeCollection collection)
            {
                _index = -1;
                _collection = collection;
            }
            
            /// <summary>
            /// Gets the ObjectExplorer.Node object in the enumerated NodeCollection currently indexed by this instance.
            /// </summary>
            public ObjectExplorer.Node Current
            {
                get
                {
                    if (((_index == -1) 
                                || (_index >= _collection.Count)))
                    {
                        throw new System.IndexOutOfRangeException("Enumerator not started.");
                    }
                    else
                    {
                        return _currentElement;
                    }
                }
            }
            
            /// <summary>
            /// Gets the current element in the collection.
            /// </summary>
            object IEnumerator.Current
            {
                get
                {
                    if (((_index == -1) 
                                || (_index >= _collection.Count)))
                    {
                        throw new System.IndexOutOfRangeException("Enumerator not started.");
                    }
                    else
                    {
                        return _currentElement;
                    }
                }
            }
            
            /// <summary>
            /// Reset the cursor, so it points to the beginning of the enumerator.
            /// </summary>
            public void Reset()
            {
                _index = -1;
                _currentElement = null;
            }
            
            /// <summary>
            /// Advances the enumerator to the next queue of the enumeration, if one is currently available.
            /// </summary>
            /// <returns>true, if the enumerator was succesfully advanced to the next queue; false, if the enumerator has reached the end of the enumeration.</returns>
            public bool MoveNext()
            {
                if ((_index 
                            < (_collection.Count - 1)))
                {
                    _index = (_index + 1);
                    _currentElement = this._collection[_index];
                    return true;
                }
                _index = _collection.Count;
                return false;
            }
        }
    }
}
