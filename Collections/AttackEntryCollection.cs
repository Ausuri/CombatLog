//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace CombatLog
{
    using System;
    using System.Collections;
	using System.Diagnostics;
    
    
    /// <summary>
    /// Strongly typed collection of CombatLog.AttackEntry.
    /// </summary>
    public class AttackEntryCollection : System.Collections.CollectionBase
    {

		public Hashtable AttackerData = new Hashtable();

		public DateTime LogEntriesStartDTM
		{
			get { return GetStartDTM(); }
		}

		public DateTime LogEntriesEndDTM
		{
			get { return GetEndDTM(); }
		}

		private DateTime GetStartDTM()
		{
			DateTime StartDTM = new DateTime(2038,12,30);

			foreach ( AttackEntry c in this.List )
				if ( c.LogDTM < StartDTM )
					StartDTM = c.LogDTM;

			return StartDTM;
		}

		private DateTime GetEndDTM()
		{
			DateTime EndDTM = new DateTime(1900,1,1);

			foreach ( AttackEntry c in this.List )
				if ( c.LogDTM > EndDTM )
					EndDTM = c.LogDTM;

			return EndDTM;

		}

        /// <summary>
        /// Default constructor.
        /// </summary>
        public AttackEntryCollection() : 
                base()
        {
        }
        
        /// <summary>
        /// Gets or sets the value of the CombatLog.AttackEntry at a specific position in the AttackEntryCollection.
        /// </summary>
        public CombatLog.AttackEntry this[int index]
        {
            get
            {
                return ((CombatLog.AttackEntry)(this.List[index]));
            }
            set
            {
                this.List[index] = value;
            }
        }

		public void GenerateAttackerStats()
		{
			AttackerData.Clear();

			foreach ( AttackEntry c in this.List )
			{
				AttackerSummary ws;

				//
				// Do we have an entry for this Attacker?
				//
				if ( !AttackerData.ContainsKey(c.AttackerName) )
				{
					ws = new AttackerSummary();
					ws.AttackerName = c.AttackerName;
					AttackerData.Add(ws.AttackerName, (object)ws);
				}

				//
				// Get a copy of the entry for this Attacker
				//
				ws = (AttackerSummary)AttackerData[c.AttackerName];
				ws.ShotsFired += 1;
				ws.TotalDamage += c.DamageCaused;

				//
				// Record the start and end times for this weapon being active
				//
				if ( c.LogDTM < ws.FiringStartedDTM )
					ws.FiringStartedDTM = c.LogDTM;

				if ( c.LogDTM > ws.FiringEndedDTM )
					ws.FiringEndedDTM = c.LogDTM;

				if ( c.DamageCaused == 0 )
					((AttackerSummary)AttackerData[c.AttackerName]).ShotsMissed +=1;
				else
					((AttackerSummary)AttackerData[c.AttackerName]).ShotsHit += 1;

				//
				// Do we have an entry for this HitType on this weapon?
				//
				if ( !ws.HitSummary.Contains(c.HitDescription) )
				{
					// Create a new instance of this hittype
					ws.HitSummary.Add(new HitTypeInfo(c.HitDescription, 0,0));
				}

				HitTypeInfo ht = ws.HitSummary[c.HitDescription];

				ht.DisplayName = HitTypeLib.GetDisplayString(c.HitDescription);
				ht.HitCount += 1;
				ht.DamageCaused += c.DamageCaused;
				ht.Rank = HitTypeLib.GetRank(c.HitDescription);
			}
		}

		public AttackEntryCollection FilterByWeapon(string WeaponName)
		{
			string[] SelectedWeapons = WeaponName.Split(';');

			AttackEntryCollection ae = new AttackEntryCollection();

			foreach ( AttackEntry a in this.List )
			{
				foreach ( string wn in SelectedWeapons )
				{
					if (a.WeaponName == wn.Trim() )
					{
						ae.Add(a);
					}
				}
			}

			return ae;
		}

		public AttackEntryCollection FilterByHitType(string HitType)
		{
			string[] SelectedHitTypes = HitType.Split(';');

			AttackEntryCollection ae = new AttackEntryCollection();

			foreach ( AttackEntry a in this.List )
			{
				foreach ( string wn in SelectedHitTypes )
				{
					if (a.HitType == wn.Trim() )
					{
						ae.Add(a);
					}
				}
			}

			return ae;
		}

		public AttackEntryCollection FilterByAttacker(string Attackers)
		{
			string[] SelectedAttackers = Attackers.Split(';');

			AttackEntryCollection ae = new AttackEntryCollection();

			foreach ( AttackEntry a in this.List )
			{
				foreach ( string wn in SelectedAttackers )
				{
					if (a.AttackerName == wn.Trim() )
					{
						ae.Add(a);
					}
				}
			}

			return ae;
		}
        
		public string[] GetUniqueAttackers()
		{
			Hashtable Attackers = new Hashtable();

			foreach ( AttackEntry a in this.List )
			{
				if ( !Attackers.ContainsKey(a.AttackerName) )
					Attackers.Add(a.AttackerName, "foo");
			}

			if ( Attackers.Count == 0 )
				return new string[] {"None"};

			string[] AttackerList = new string[Attackers.Count];

			int i = 0;
			foreach ( object o in Attackers.Keys )
				AttackerList[i++] = o.ToString();

			return AttackerList;
		}

		public string[] GetUniqueHitTypes()
		{
			Hashtable HitTypes = new Hashtable();

			foreach ( AttackEntry a in this.List )
			{
				if ( !HitTypes.ContainsKey(a.HitDescription) )
					HitTypes.Add(a.HitDescription, "foo");
			}

			if ( HitTypes.Count == 0 )
				return new string[] {"None"};

			string[] HitTypeList = new string[HitTypes.Count];

			int i = 0;
			foreach (object o in HitTypes.Keys)
				HitTypeList[i++] = o.ToString();

			return HitTypeList;
		}

		public string[] GetUniqueWeapons()
		{
			Hashtable Weapons = new Hashtable();

			foreach ( AttackEntry a in this.List )
			{
				if ( !Weapons.ContainsKey(a.WeaponName) )
					Weapons.Add(a.WeaponName, "foo");
			}

			if ( Weapons.Count == 0 )
				return new string[] {"None"};

			string[] WeaponList = new string[Weapons.Count];

			int i = 0;
			foreach ( object o in Weapons.Keys )
				WeaponList[i++] = o.ToString();

			return WeaponList;
		}

        /// <summary>
        /// Append a CombatLog.AttackEntry entry to this collection.
        /// </summary>
        /// <param name="value">CombatLog.AttackEntry instance.</param>
        /// <returns>The position into which the new element was inserted.</returns>
        public int Add(CombatLog.AttackEntry value)
        {
            return this.List.Add(value);
        }
        
        /// <summary>
        /// Determines whether a specified CombatLog.AttackEntry instance is in this collection.
        /// </summary>
        /// <param name="value">CombatLog.AttackEntry instance to search for.</param>
        /// <returns>True if the CombatLog.AttackEntry instance is in the collection; otherwise false.</returns>
        public bool Contains(CombatLog.AttackEntry value)
        {
            return this.List.Contains(value);
        }
        
        /// <summary>
        /// Retrieve the index a specified CombatLog.AttackEntry instance is in this collection.
        /// </summary>
        /// <param name="value">CombatLog.AttackEntry instance to find.</param>
        /// <returns>The zero-based index of the specified CombatLog.AttackEntry instance. If the object is not found, the return value is -1.</returns>
        public int IndexOf(CombatLog.AttackEntry value)
        {
            return this.List.IndexOf(value);
        }
        
        /// <summary>
        /// Removes a specified CombatLog.AttackEntry instance from this collection.
        /// </summary>
        /// <param name="value">The CombatLog.AttackEntry instance to remove.</param>
        public void Remove(CombatLog.AttackEntry value)
        {
            this.List.Remove(value);
        }
        
        /// <summary>
        /// Returns an enumerator that can iterate through the CombatLog.AttackEntry instance.
        /// </summary>
        /// <returns>An CombatLog.AttackEntry's enumerator.</returns>
        public new AttackEntryCollectionEnumerator GetEnumerator()
        {
            return new AttackEntryCollectionEnumerator(this);
        }
        
        /// <summary>
        /// Insert a CombatLog.AttackEntry instance into this collection at a specified index.
        /// </summary>
        /// <param name="index">Zero-based index.</param>
        /// <param name="value">The CombatLog.AttackEntry instance to insert.</param>
        public void Insert(int index, CombatLog.AttackEntry value)
        {
            this.List.Insert(index, value);
        }
        
        /// <summary>
        /// Strongly typed enumerator of CombatLog.AttackEntry.
        /// </summary>
        public class AttackEntryCollectionEnumerator : object, System.Collections.IEnumerator
        {
            
            /// <summary>
            /// Current index
            /// </summary>
            private int _index;
            
            /// <summary>
            /// Current element pointed to.
            /// </summary>
            private CombatLog.AttackEntry _currentElement;
            
            /// <summary>
            /// Collection to enumerate.
            /// </summary>
            private AttackEntryCollection _collection;
            
            /// <summary>
            /// Default constructor for enumerator.
            /// </summary>
            /// <param name="collection">Instance of the collection to enumerate.</param>
            internal AttackEntryCollectionEnumerator(AttackEntryCollection collection)
            {
                _index = -1;
                _collection = collection;
            }
            
            /// <summary>
            /// Gets the CombatLog.AttackEntry object in the enumerated AttackEntryCollection currently indexed by this instance.
            /// </summary>
            public CombatLog.AttackEntry Current
            {
                get
                {
                    if (((_index == -1) 
                                || (_index >= _collection.Count)))
                    {
                        throw new System.IndexOutOfRangeException("Enumerator not started.");
                    }
                    else
                    {
                        return _currentElement;
                    }
                }
            }
            
            /// <summary>
            /// Gets the current element in the collection.
            /// </summary>
            object IEnumerator.Current
            {
                get
                {
                    if (((_index == -1) 
                                || (_index >= _collection.Count)))
                    {
                        throw new System.IndexOutOfRangeException("Enumerator not started.");
                    }
                    else
                    {
                        return _currentElement;
                    }
                }
            }
            
            /// <summary>
            /// Reset the cursor, so it points to the beginning of the enumerator.
            /// </summary>
            public void Reset()
            {
                _index = -1;
                _currentElement = null;
            }
            
            /// <summary>
            /// Advances the enumerator to the next queue of the enumeration, if one is currently available.
            /// </summary>
            /// <returns>true, if the enumerator was succesfully advanced to the next queue; false, if the enumerator has reached the end of the enumeration.</returns>
            public bool MoveNext()
            {
                if ((_index 
                            < (_collection.Count - 1)))
                {
                    _index = (_index + 1);
                    _currentElement = this._collection[_index];
                    return true;
                }
                _index = _collection.Count;
                return false;
            }
        }
    }
}
